buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/groups/public"
        }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT"
        classpath "com.matthewprenger:CurseGradle:1.0-SNAPSHOT"
    }
}

apply plugin: "net.minecraftforge.gradle.forge"
apply plugin: "com.matthewprenger.cursegradle"
//apply plugin: "org.ajoberstar.grgit"
//apply plugin: "org.ajoberstar.github-pages"
//apply plugin: "org.ajoberstar.release-base"

def mod_file = getModFile()
version = getVersion("VERSION", mod_file)
group= "modernmetals"
archivesBaseName = "ModernMetals_1.10.2"
sourceCompatibility = targetCompatibility = "1.8"
//ext.repo = Grgit.open(project.file('.'))

minecraft {
    version = "1.10.2-12.18.1.2011"
    runDir = "run"
    mappings = "snapshot_20160917"
}

repositories {
    maven {
        name "DVS1 Maven FS"
        url "http://dvs1.progwml6.com/files/maven"
    }
    maven {
        name "Chickenbones Repo"
        url "http://chickenbones.net/maven/"
    }
    maven {
        name "tterrag"
        url "http://maven.tterrag.com/"
    }
}

dependencies {
    compile "slimeknights:TConstruct:1.10.2-2.5.1.jenkins350:deobf"
    compile "slimeknights.mantle:Mantle:1.10.2-1.0.0.jenkins170:deobf"
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}


task apiJar(type: Jar) {
    from apiClasses
    classifier = 'apiClasses'
}

task deobfJar(type: Jar) {
    classifier = "deobf"
    from sourceSets.main.output
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = "javadoc"
    from javadoc.getDestinationDir()
}

artifacts {
//  archives apiJar
    archives deobfJar
    archives sourceJar
    archives javadocJar
}

curseforge {
    apiKey = ""
    project {
        id = "244357"
        changelog = file("CHANGELOG.txt")
        releaseType = "release"
        mainArtifact(jar) {
            displayName = "Modern Metals $project.version"
            relations {
                requiredLibrary "mmd-orespawn"
                requiredLibrary "base-metals"
                optionalLibrary "additional-loot-tables"
            }
        }
        addArtifact sourceJar
        addArtifact deobfJar
        addArtifact javadocJar
    }
}

String getModFile() {
    String path = "";
    FileTree tree = fileTree(dir: "src/main/java")
    tree.include '**/*.java'
    tree.visit { element ->
        if (element.file.isFile()) {
            element.file.eachLine { String s ->
                s = s.trim();
                if (s.startsWith("@Mod")) {
                    path = "src/main/java/$element.relativePath"
                }
            }
        }
    }
    return path;
}

String getVersion(String type, String mod_file) {
    String major = "0";
    String revision = "0";
    String patch = "0";
    String prefix = "public static final String $type = \"";
    File file = file(mod_file)
    file.eachLine { String s ->
        s = s.trim();
        if (s.startsWith(prefix)) {
            s = s.substring(prefix.length(), s.length() - 2);
            String[] pts = s.split("\\.");

            major = pts[0];
            revision = pts[1];
            patch = pts[2];
        }
    }
    return "$major.$revision.$patch";
}

/*
task tagRelease << {
    repo.tag.add {
        name = version
        message = "Release of ${version}"
    }
}
*/
